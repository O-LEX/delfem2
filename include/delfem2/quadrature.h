//
// Created by Nobuyuki Umetani on 2021/12/11.
//

#ifndef DFM2_QUADRATURE_H_
#define DFM2_QUADRATURE_H_

#include <array>

namespace delfem2 {

constexpr static unsigned int NIntLineGauss[6] = {
  1, 2, 3, 4, 5, 6
};

// https://pomax.github.io/bezierinfo/legendre-gauss.html
template<typename T>
constexpr static T LineGauss[7][7][2] =
  {
    { // 0
      {0.0, 2.0},
    },
    { // 1
      {-0.577350269189626, 1.0},
      {0.577350269189626, 1.0},
    },
    {  // 2
      {-0.774596669241483, 0.555555555555556},
      {0.0, 0.888888888888889},
      {0.774596669241483, 0.555555555555556},
    },
    {  // 3
      {-0.861136311594053, 0.347854845137454},
      {-0.339981043584856, 0.652145154862546},
      {0.339981043584856, 0.652145154862546},
      {0.861136311594053, 0.347854845137454},
    },
    {  // 4
      {0.0000000000000000, 0.5688888888888889},
      {-0.5384693101056831, 0.4786286704993665},
      {0.5384693101056831, 0.4786286704993665},
      {-0.9061798459386640, 0.2369268850561891},
      {0.9061798459386640, 0.2369268850561891},
    },
    {  // 5th-order 6point
      {0.6612093864662645, 0.3607615730481386},
      {-0.6612093864662645, 0.3607615730481386},
      {-0.2386191860831969, 0.4679139345726910},
      {0.2386191860831969, 0.4679139345726910},
      {-0.9324695142031521, 0.1713244923791704},
      {0.9324695142031521, 0.1713244923791704}
    },
    {  // 6th-order 7point
      {0.00000000000000000e+00,  4.17959183673469388e-01},
      {-4.05845151377397167e-01, 3.81830050505118945e-01},
      {4.05845151377397167e-01,  3.81830050505118945e-01},
      {-7.41531185599394440e-01, 2.79705391489276668e-01},
      {7.41531185599394440e-01,  2.79705391489276668e-01},
      {-9.49107912342758525e-01, 1.29484966168869693e-01},
      {9.49107912342758525e-01,  1.29484966168869693e-01},
    }
  };

// =================================

// Automatically generated by gauss_kronrod.cpp
template<class Real, unsigned N>
class gauss_detail;

template<class Real, unsigned N>
class gauss_kronrod_detail;

template<class T>
class gauss_detail<T, 7> {
 private:
  static constexpr std::array<T, 4> m_abscissa = {
    0.00000000000000000e+00,
    4.05845151377397167e-01,
    7.41531185599394440e-01,
    9.49107912342758525e-01,
  };
  static constexpr std::array<T, 4> m_weights = {
    4.17959183673469388e-01,
    3.81830050505118945e-01,
    2.79705391489276668e-01,
    1.29484966168869693e-01,
  };
 public:
  static constexpr std::array<T, 4> const &abscissa() {
    return m_abscissa;
  }
  static constexpr std::array<T, 4> const &weights() {
    return m_weights;
  }
};

template<class T>
class gauss_detail<T, 11> {
 private:
  static constexpr std::array<T, 6> m_abscissa = {
    0.00000000000000000e+00,
    2.69543155952344972e-01,
    5.19096129206811816e-01,
    7.30152005574049324e-01,
    8.87062599768095299e-01,
    9.78228658146056993e-01,
  };
  static constexpr std::array<T, 6> m_weights = {
    2.72925086777900631e-01,
    2.62804544510246662e-01,
    2.33193764591990480e-01,
    1.86290210927734251e-01,
    1.25580369464904625e-01,
    5.56685671161736665e-02,
  };
 public:
  static constexpr std::array<T, 6> const &abscissa() {
    return m_abscissa;
  }
  static constexpr std::array<T, 6> const &weights() {
    return m_weights;
  }
};

template<class T>
class gauss_kronrod_detail<T, 15> {
 private:
  static constexpr std::array<T, 8> m_abscissa = {
    0.00000000000000000e+00,
    2.07784955007898468e-01,
    4.05845151377397167e-01,
    5.86087235467691130e-01,
    7.41531185599394440e-01,
    8.64864423359769073e-01,
    9.49107912342758525e-01,
    9.91455371120812639e-01,
  };
  static constexpr std::array<T, 8> m_weights = {
    2.09482141084727828e-01,
    2.04432940075298892e-01,
    1.90350578064785410e-01,
    1.69004726639267903e-01,
    1.40653259715525919e-01,
    1.04790010322250184e-01,
    6.30920926299785533e-02,
    2.29353220105292250e-02,
  };
 public:
  static constexpr std::array<T, 8> const &abscissa() {
    return m_abscissa;
  }
  static constexpr std::array<T, 8> const &weights() {
    return m_weights;
  }
};

template<class T>
class gauss_kronrod_detail<T, 23> {
 private:
  static constexpr std::array<T, 12> m_abscissa = {
    0.00000000000000000e+00,
    1.36113000799361816e-01,
    2.69543155952344972e-01,
    3.97944140952377574e-01,
    5.19096129206811816e-01,
    6.30599520161965092e-01,
    7.30152005574049324e-01,
    8.16057456656220942e-01,
    8.87062599768095299e-01,
    9.41677108578067946e-01,
    9.78228658146056993e-01,
    9.96369613889542634e-01,
  };
  static constexpr std::array<T, 12> m_weights = {
    1.36577794711118301e-01,
    1.35193572799884533e-01,
    1.31280684229805644e-01,
    1.25158799100319505e-01,
    1.16739502461047271e-01,
    1.05872074481389396e-01,
    9.29530985969008278e-02,
    7.86645719322273293e-02,
    6.30974247503749066e-02,
    4.58293785644264160e-02,
    2.71565546821042621e-02,
    9.76544104596075802e-03,
  };
 public:
  static constexpr std::array<T, 12> const &abscissa() {
    return m_abscissa;
  }
  static constexpr std::array<T, 12> const &weights() {
    return m_weights;
  }
};

// ============================

constexpr static unsigned int NIntTriGauss[3] = {1, 3, 7};

template<typename T>
constexpr static T TriGauss[3][7][3] =
    {
        { // liner
            {0.3333333333, 0.3333333333, 1.0},
            {0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0},
        },
        { // quadratic
            {0.1666666667, 0.1666666667, 0.3333333333},
            {0.6666666667, 0.1666666667, 0.3333333333},
            {0.1666666667, 0.6666666667, 0.3333333333},
            {0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0},
        },
        { // cubic
            {0.1012865073, 0.1012865073, 0.1259391805},
            {0.7974269854, 0.1012865073, 0.1259391805},
            {0.1012865073, 0.7974269854, 0.1259391805},
            {0.4701420641, 0.0597158718, 0.1323941527},
            {0.4701420641, 0.4701420641, 0.1323941527},
            {0.0597158718, 0.4701420641, 0.1323941527},
            {0.3333333333, 0.3333333333, 0.225},
        }
    };

// ============================

constexpr static unsigned int NIntTetGauss[4] = {
    1, 4, 5, 16
};

template<typename T>
constexpr static T TetGauss[4][16][4] = {
    {    // order-1    1point
        {0.25, 0.25, 0.25, 1.0},
    },
    {    // order-2    4point
        {0.585410196624968, 0.138196601125015, 0.138196601125015, 0.25},
        {0.138196601125015, 0.585410196624968, 0.138196601125015, 0.25},
        {0.138196601125015, 0.138196601125015, 0.585410196624968, 0.25},
        {0.138196601125015, 0.138196601125015, 0.138196601125015, 0.25},
    },
    {    // order-3    5point
        {0.25, 0.25, 0.25, -0.8},
        {0.5, 0.1666666666666667, 0.1666666666666667, 0.45},
        {0.1666666666666667, 0.5, 0.1666666666666667, 0.45},
        {0.1666666666666667, 0.1666666666666667, 0.5, 0.45},
        {0.1666666666666667, 0.1666666666666667, 0.1666666666666667, 0.45},
    },
    {    // order-4    16point
        {0.7716429020672371, 0.07611903264425430, 0.07611903264425430, 0.05037379410012282},
        {0.07611903264425430, 0.7716429020672371, 0.07611903264425430, 0.05037379410012282},
        {0.07611903264425430, 0.07611903264425430, 0.7716429020672371, 0.05037379410012282},
        {0.07611903264425430, 0.07611903264425430, 0.07611903264425430, 0.05037379410012282},

        {0.1197005277978019, 0.4042339134672644, 0.4042339134672644, 0.06654206863329239},
        {0.4042339134672644, 0.1197005277978019, 0.4042339134672644, 0.06654206863329239},
        {0.4042339134672644, 0.4042339134672644, 0.1197005277978019, 0.06654206863329239},

        {0.07183164526766925, 0.4042339134672644, 0.4042339134672644, 0.06654206863329239},
        {0.4042339134672644, 0.07183164526766925, 0.4042339134672644, 0.06654206863329239},
        {0.4042339134672644, 0.4042339134672644, 0.07183164526766925, 0.06654206863329239},

        {0.1197005277978019, 0.07183164526766925, 0.4042339134672644, 0.06654206863329239},
        {0.4042339134672644, 0.1197005277978019, 0.07183164526766925, 0.06654206863329239},
        {0.07183164526766925, 0.4042339134672644, 0.1197005277978019, 0.06654206863329239},

        {0.07183164526766925, 0.1197005277978019, 0.4042339134672644, 0.06654206863329239},
        {0.4042339134672644, 0.07183164526766925, 0.1197005277978019, 0.06654206863329239},
        {0.1197005277978019, 0.4042339134672644, 0.07183164526766925, 0.06654206863329239},
    }
};


}

#endif // DFM2_QUADRATURE_H_
